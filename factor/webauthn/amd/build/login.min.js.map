{"version":3,"file":"login.min.js","sources":["../src/login.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * For collecting WebAuthn authenticator details on login\n *\n * @module     factor_webauthn/login\n * @copyright  Catalyst IT\n * @author     Alex Morris <alex.morris@catalyst.net.nz>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['factor_webauthn/utils'], function(utils) {\n    return {\n        init: function(initialArgs) {\n            document.getElementById('id_submitbutton').addEventListener('click', async function(e) {\n                if (!navigator.credentials || !navigator.credentials.create) {\n                    throw new Error('Browser not supported.');\n                }\n                e.preventDefault();\n\n                const getArgs = JSON.parse(initialArgs);\n\n                if (getArgs.success === false) {\n                    throw new Error(getArgs.msg || 'unknown error occured');\n                }\n\n                utils.recursiveBase64StrToArrayBuffer(getArgs);\n\n                const cred = await navigator.credentials.get(getArgs);\n\n                const authenticatorAttestationResponse = {\n                    id: cred.rawId ? utils.arrayBufferToBase64(cred.rawId) : null,\n                    clientDataJSON: cred.response.clientDataJSON ? utils.arrayBufferToBase64(cred.response.clientDataJSON) : null,\n                    authenticatorData:\n                        cred.response.authenticatorData ? utils.arrayBufferToBase64(cred.response.authenticatorData) : null,\n                    signature: cred.response.signature ? utils.arrayBufferToBase64(cred.response.signature) : null,\n                    userHandle: cred.response.userHandle ? utils.arrayBufferToBase64(cred.response.userHandle) : null\n                };\n\n                document.getElementById('id_response_input').value = JSON.stringify(authenticatorAttestationResponse);\n                document.getElementById('id_response_input').form.submit();\n            });\n        }\n    };\n});\n"],"names":["define","utils","init","initialArgs","document","getElementById","addEventListener","e","navigator","credentials","create","Error","preventDefault","getArgs","JSON","parse","success","msg","recursiveBase64StrToArrayBuffer","get","cred","authenticatorAttestationResponse","id","rawId","arrayBufferToBase64","clientDataJSON","response","authenticatorData","signature","userHandle","value","stringify","form","submit"],"mappings":";;;;;;;;;AAwBAA,+BAAO,CAAC,0BAA0B,SAASC,aAChC,CACHC,KAAM,SAASC,yBACXC,SAASC,eAAe,mBAAmBC,iBAAiB,qCAAS,iBAAeC,6JAC3EC,UAAUC,aAAgBD,UAAUC,YAAYC,oCAC3C,IAAIC,MAAM,oCAEpBJ,EAAEK,kBAIsB,KAFlBC,QAAUC,KAAKC,MAAMZ,cAEfa,qCACF,IAAIL,MAAME,QAAQI,KAAO,uCAGnChB,MAAMiB,gCAAgCL,yBAEnBL,UAAUC,YAAYU,IAAIN,gBAAvCO,mBAEAC,iCAAmC,CACrCC,GAAIF,KAAKG,MAAQtB,MAAMuB,oBAAoBJ,KAAKG,OAAS,KACzDE,eAAgBL,KAAKM,SAASD,eAAiBxB,MAAMuB,oBAAoBJ,KAAKM,SAASD,gBAAkB,KACzGE,kBACIP,KAAKM,SAASC,kBAAoB1B,MAAMuB,oBAAoBJ,KAAKM,SAASC,mBAAqB,KACnGC,UAAWR,KAAKM,SAASE,UAAY3B,MAAMuB,oBAAoBJ,KAAKM,SAASE,WAAa,KAC1FC,WAAYT,KAAKM,SAASG,WAAa5B,MAAMuB,oBAAoBJ,KAAKM,SAASG,YAAc,MAGjGzB,SAASC,eAAe,qBAAqByB,MAAQhB,KAAKiB,UAAUV,kCACpEjB,SAASC,eAAe,qBAAqB2B,KAAKC"}